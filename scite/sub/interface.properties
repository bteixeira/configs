## Set the initial window size and position. If these are omitted then the environment's defaults are used. If the width or height are -1 or the position.maximize property is set then the window is maximised.
#position.left
#position.top
#position.width
#position.height
#position.maximize

## Set to a number between 1 and 100 to configure that many buffers. Values outside this range are clamped to be within the range. The default is 1 which turns off UI features concerned with buffers.
## This value is read only once, early in the startup process and only from the global and user properties files. So after changing it, restart SciTE to see the effect.
#buffers

## This setting chooses the ordering of buffer switching when Ctrl+Tab pressed. Set to 1, the buffers are selected in the order of their previous selection otherwise they are chosen based on the buffer number.
#buffers.zorder.switching

## The classic GUI question. Normally, when SciTE is about to close a file which has unsaved edits it asks this annoying question. To turn off the question, set are.you.sure to 0 and files will be automatically saved without bothering the user. To abandon edits to a file use the New command. New always asks "Are you sure?" giving an opportunity to not save the file.
## When running or building a file, its most likely that you want the file to be saved first. To enable a confirmation dialog for performing Compile, Build or Go commands, set are.you.sure.for.build=1.
#are.you.sure
#are.you.sure.for.build

## SciTE normally saves the current buffer when performing a Compile, Build, or Go command. To save all buffers set save.all.for.build=1
#save.all.for.build

## The default EOL mode (characters that make up line ends) depends on your platform. You can overwrite this behaviour by setting the property to
## LF for UNIX and OS X format
## CR for Macintosh format prior to OS X
## CRLF for DOS/Windows format
#eol.mode

## This setting overrides the eol.mode value and chooses the end of line character sequence based on the current contents of the file when it is opened. The line ending used the most in the file is chosen.
eol.auto=1
## There is a blank margin on both sides of the text. It is drawn in the background colour of default text. This defaults to one pixel for both left and right sides but may be altered with these settings.
## If output.blank.margin.left is set then it overrides blank.margin.left for the output pane.
#blank.margin.left=2
#blank.margin.right=2
#output.blank.margin.left

## Setting this to a number makes SciTE display a selection margin to the left of the text. The value is the number of pixels wide the selection margin should be. Line markers are displayed in the selection margin area.
margin.width=1

## SciTE is able to display a column of line numbers to the left of the selection margin. Setting line.margin.visible to 1 makes this column visible at startup. The line.margin.width property controls how much space is reserved for the line numbers, in terms of the number of digits that can be displayed. To specify that the margin should expand if needed to accommodate larger line numbers, add a '+' after the number of digits, e.g. line.margin.width=3+.
line.margin.visible=1
line.margin.width=1+

## Setting tabbar.visible to 1 makes the tab bar visible at start up. The buffers property must be set to a value greater than 1 for this option to work.
#tabbar.visible

## Setting tabbar.hide.one to 1 hides the tab bar until there is more than one tab.
tabbar.hide.one=1

## Setting this to 1 makes the tool bar visible at start up.
#toolbar.visible

## SciTE has a built-in icon set for the toolbar, setting this to 1 makes SciTE more integrated in the GNOME desktop by using the icons provided by the current theme used in GNOME.
#toolbar.usestockicons

## The path bar is a line of text under the tab bar showing the full path of the currently selected tab. Setting pathbar.visible to 1 makes the path bar visible on GTK+.
pathbar.visible=1

## Setting this to 1 changes the technique used to determine when to enable or disable tool bar buttons to be less accurate. This may improve performance on slow machines.
#undo.redo.lazy

## Setting this to 1 makes the status bar visible at start up.
statusbar.visible=1

## The statusbar.text.1 option defines the information displayed in the status bar by default on all platforms. Property values may be used in this text using the $() syntax. Commonly used properties are: ReadOnly, EOLMode, BufferLength, NbOfLines (in buffer), SelLength (chars), SelHeight (lines). Extra properties defined for the status bar are LineNumber, ColumnNumber, and OverType which is either "OVR" or "INS" depending on the overtype status. You can also use file properties, which, unlike those above, are not updated on each keystroke: FileName or FileNameExt, FileDate and FileTime and FileAttr. Plus CurrentDate and CurrentTime.
## On Windows only, further texts may be set as statusbar.text.2 .. and these may be cycled between by clicking the status bar.
## The statusbar.number option defines how many texts are to be cycled through.
statusbar.1
statusbar.text.1=$(LineNumber):$(ColumnNumber)	$(OverType) ($(EOLMode))	   [$(FileDate) $(FileTime)]	$(FileAttr)


## Setting this to 1 rather than the default 0 may make SciTE draw output into a buffer bitmap first and then to the screen instead of directly to the screen. On old platforms and some unusual modes this can result in less flickering. but is slower.
## Has no effect on OS X and may have no effect on other platforms or technology choices.
#buffered.draw

## There are several orders in which the text area may be drawn offering a trade-off between speed and allowing all pixels of text to be seen even when they overlap other elements. There may also be some flickering on some platforms with higher numbers of phases unless buffered drawing is turned on.
## In single phase drawing (phases.draw=0) each run of characters in one style is drawn along with its background. If a character overhangs the end of a run, such as in "V_" where the "V" is in a different style from the "_", then this can cause the right hand side of the "V" to be overdrawn by the background of the "_" which cuts it off.
## Two phase drawing (phases.draw=1) fixes this by drawing all the backgrounds of a line first and then drawing the text in transparent mode. Lines are drawn separately and no line will overlap another so any pixels that overlap into another line such as extreme ascenders and descenders on characters will be cut off.
## Multiple phase drawing (phases.draw=2) draws the whole area multiple times, once for each feature, building up the the appearance in layers or phases. The coloured backgrounds for all lines are drawn before any text and then all the text is drawn in transparent mode over this combined background without clipping text to the line boundaries. This allows extreme ascenders and decenders to overflow into the adjacent lines. This mode is incompatible with buffered.draw so will be treated as phases.draw=1 when bufferd.draw=1.
## The default is for drawing to be two phase.
## The two.phase.draw property was used before multiple phase drawing was added and should be replaced with phases.draw.
#phases.draw
#two.phase.draw

## The load.on.activate property causes SciTE to check whether the current file has been updated by another process whenever it is activated. This is useful when another editor such as a WYSIWYG HTML editor, is being used in conjunction with SciTE.
## The save.on.deactivate property causes SciTE to save the file whenever the SciTE application loses focus. This is useful when developing web pages and you want to often check the appearance of the page in a browser.
load.on.activate=1
#save.on.deactivate

## When both this and load.on.activate are set to 1, SciTE will ask if you really want to reload the modified file, giving you the chance to keep the file as it is. By default this property is disabled, causing SciTE to reload the file without bothering you.
#are.you.sure.on.reload

## The save.on.timer property causes SciTE to save modified files whenever there have been no modifications for the number of seconds specified by the property. When set to 0, the default, this feature is disabled and files are not automatically saved.
#save.on.timer

## When set to 1, reloading a file does not delete all the undo history. This is useful when load.on.activate is used in conjunction with filter commands.
reload.preserves.undo=1

## This option allows opening files in an existing instance of SciTE rather than always opening a new instance. When this option is set and SciTE is started, it checks to see if there are any other instances of SciTE open. If there is, another instance is asked to open the file and become active and the new instance exits. On Windows, the instance with the Options | Open Files Here menu item checked opens the file. On GTK+, an arbitrary instance opens the file.
check.if.already.open=1

## When this option is set then opened documents are initially read only. New files are not affected by this setting.
#read.only

## If this option is set, SciTE indicates that the buffer is read only by adding a "pipe"-character (|) to the file name in the tab bar and in the buffer menu.
#read.only.indicator

## This setting controls whether files are opened and saved without blocking the user interface while they are being read or written. Files larger than the given size in bytes will be read or written in the background while smaller files will be read or written directly and SciTE will not respond until the file access is completed. The default value is -1 allows background processing for all files. For saving, the size used is the in-memory size in bytes which will differ from the on-disk size when the UTF-16 encoding is used.
#background.open.size
#background.save.size

## If this option is set, SciTE will close when its last buffer has been closed, e.g. with File/Close. (By default, if this option is not set, SciTE will remain open and will create a new blank document when its last buffer is closed.)
#quit.on.close.last


## On GTK+, the modifier key used to make rectangular selections can be set with this property. Valid options are 2 (Ctrl), 4 (Alt) or 8 (Super). Super is often assigned to the Windows/Start key on Windows keyboards or the Command key on Mac keyboards. 
## Since the Alt key is often used by window managers to move windows, this will need to be configured off to use the combination in SciTE. This can be done for Metacity using gconf-editor to modify the /apps/metacity/general/mouse_button_modifier. A valid value here is <Super>.
#rectangular.selection.modifier

## Sets whether switching to rectangular selection mode while making a selection with the mouse is allowed (1) or not (0). Default is 0.
#selection.rectangular.switch.mouse

## Set selection.multiple to make multiple selections with the mouse by holding down the Ctrl key.
## Set selection.additional.typing to 1. to allow typing, backspace and delete to affect all selections including each line of rectangular selections. When set to 0, typing only affects the main selection.
## Set selection.multipaste to 1 to paste at all selections. If set to 0, the paste will only be inserted at the last selection.
selection.multiple
selection.additional.typing
selection.multipaste


## If set, then the Mark All command in the Find dialog will draw translucent boxes over each string found. (See indicators.alpha and indicators.under)
## Overridden by find.mark.indicator.
find.mark=1


## When a command execution produces error messages, and you step with F4 key through the matching source lines, this option selects the line where the error occurs. Most useful if the error message contains the column of error too as the selection will start at the column of the error. The error message must contain the column and must be understood by SciTE (currently only supported for HTML Tidy). The tab size assumed by the external tool must match the tab size of your source file for correct column reporting.
#error.select.line



## Defines a path for the Open Selected Filename command in the File menu. The path is searched if the selected filename doesn't contain an absolute path or the file is not found in the document directory. The directories in openpath are separated by ';' on Windows and ':' on OS X and GTK+.
## An openpath setting may look like:
## openpath.*.txt=c:\dos\;f:\;
## openpath.$(file.patterns.cpp)=$(cpp_includes)
#openpath.filepattern

## Defines a suffix to add to the selected file name for the Open Selected Filename command in the File menu. This is used in languages where the suffix is not given when accessing a file. An example is python where "import xlib" will most often mean to import from a file called "xlib.py".
## An open.suffix setting may look like:
## open.suffix.*.py=.py
#open.suffix.filepattern


## Strips trailing white spaces from the file while saving.
## The global strip.trailing.spaces property can be overridden for files that match a pattern by using the file pattern forms: 
## strip.trailing.spaces.*.yaml=0
## or
## strip.trailing.spaces.$(file.patterns.yaml)=0
#strip.trailing.spaces
#strip.trailing.spaces.filepattern

## Ensures file ends with a line end when saved.
#ensure.final.line.end

## Ensures all lines end with the current Line End Characters setting when saved.
#ensure.consistent.line.ends

## Loads an abbreviations file for a particular language overriding the default abbreviations file. For example,
## abbreviations.*.c=$(SciteUserHome)/c_abbrev.properties
#abbreviations.filepattern

## Loads a set of API files for a particular language. If there is more than one API file then the file names are separated by ';'. API files contain a sorted list of identifiers and function prototypes, one per line. If there are multiple files then each file should end with a line end or the next file's first line will merge with the previous file's last line. The "Complete Symbol" command looks at the characters before the caret and displayed the subset of the API file starting with that string. When an opening brace is typed, the file is searched for the text preceding the caret and if a function prototype is found then it is displayed as a calltip. For example, the setting
## api.*.c=w.api
## could be used with a w.api file containing
## fclose(FILE* fileClose)
## FILE
## fopen(const char* szFileName, const char* szMode)
## fpos_t
## fread(void* buf, size_t size, size_t count, FILE* file)
## fseek(FILE* file, long lnOffset, int nOrigin)
## to provide autocompletion and calltips for some of the C file functions. It is best to use the full path to the API file as otherwise the current directory is used. See the Creating API files section for ways to create API files.
#api.filepattern

## When set to 1 and an autocompletion list is invoked and there is only one element in that list then that element is automatically chosen. This means that the matched element is inserted and the list is not displayed.
#autocomplete.choose.single

## For XML and HTML, setting this property to 1 will automatically insert the corresponding end tag when '>' is typed to end a start tag. Type "<td>" and the result will be "<td></td>" with the caret placed between the tags.
#xml.auto.close.tags

## Script in ASP code is initially assumed to be in JavaScript. To change this to VBScript set asp.default.language to 2. Python is 3.
#asp.default.language

## Define keys that perform commands. This is a '|' delimited list of keys and the commands they produce. The commands are either string or numeric IDs. Numeric IDs above 2000 are Scintilla commands and are sent to the focussed pane. Named IDs and numeric IDs below 2000 are SciTE menu commands. The modifiers are Ctrl, Shift, Alt, and Super and the named keys are Left, Right, Up, Down, Insert, End, Home, Enter, Space, Tab, KeypadPlus, KeypadMinus, KeypadMultiply, KeypadDivide, Escape, Delete, PageUp, PageDown, Slash, Question, Equal, Win. 
## On OS X the command key uses the modifier Ctrl+ as this eases using one setting between platforms and the control key uses the modifier Control+. 
## The Super modifier can be used only on GTK+. 
## user.shortcuts=\
## Ctrl+Shift+I|IDM_OPEN|\
## Ctrl+Shift+Left|IDM_CLOSE|
## This property is only read at start up. 
#user.shortcuts

## Define additional commands for the context menu. This is a '|' delimited list of menu items and the commands they produce with commands defined as in user.shortcuts. An empty item produces a separator. 
## user.context.menu=\
## ||\
## Next File|IDM_NEXTFILE|\
## Prev File|IDM_PREVFILE|
#user.context.menu

## Sets the initial magnification factor of the edit and output panes. This is useful when you want to change the size of text globally, such as after changing the screen resolution without having to touch every style setting. 0 is default, negative values makes the size smaller and positive values make it larger.
#magnification
#output.magnification

## If split.vertical is set to 1 then the output pane is to the right of the editing pane, if set to 0 then the output pane is below the editing pane. The output.*.size settings determine the initial size of the output pane. If output.initial.hide is 1, then the output pane is hidden when SciTE first starts up even when output.*.size is set; otherwise the output pane is shown at startup.
#split.vertical
#output.horizontal.size
#output.vertical.size
#output.initial.hide

## If set to 1 then the output pane is cleared before any tool commands are run.
#clear.before.execute

## If wrap set to 1 then the edit pane is dynamically line wrapped. If output.wrap set to 1 then the output pane is dynamically line wrapped. These options have a high performance cost which is proportional to the amount of text so should be turned off for large documents on slow machines.
wrap=1
output.wrap=1

## If horizontal.scrollbar set to 0 then the edit pane's horizontal scrollbar is not displayed.
## horizontal.scroll.width is the document width assumed for scrolling.
## Similarly, output.horizontal.scrollbar and output.horizontal.scroll.width controls the horizontal scroll bar of the output pane.
## The horizontal scroll bar widths can automatically grow as needed to ensure all displayed lines can be fully scrolled with horizontal.scroll.width.tracking and output.horizontal.scroll.width.tracking.
## To stop the output pane from automatically scrolling, set output.scroll to 0. To have the output pane scroll and return back to the line of the executed command, set output.scroll to 1. If you want the output pane to scroll and remain at the bottom after execution, set output.scroll to 2.
## The vertical scroll range is normally set so that maximum scroll position has the last line at the bottom of the view. Set end.at.last.line to 0 to allow scrolling one page below the last line.
#horizontal.scrollbar
#horizontal.scroll.width
#horizontal.scroll.width.tracking
#output.horizontal.scrollbar
#output.horizontal.scroll.width
#output.horizontal.scroll.width.tracking
#output.scroll
end.at.last.line=1
## Chooses between word wrapping (1, the default) and character wrapping (2). Character wrapping is a better choice for Asian languages with no spaces between words.
#wrap.style

## This property changes the behaviour of the home and end keys when dynamic line wrapping is turned on. When set to 0 (the default), the Home and End keys will move the caret to the very beginning / end of the 'logical' line, whether or not the line is wrapped over multiple lines in the display. When this property is set to 1, the caret moves to the end of the current 'display' line if you press End once, or to the very end of the 'logical' line if you press End again. Likewise, the Home key moves first to the beginning of the 'display' line, then on to the very beginning of the line. In a pane where dynamic line-wrapping is not enabled, this setting has no effect.
#wrap.aware.home.end.keys


## This is a complex expression used for determining the file types that will be available in the open file dialog. For each type of file, there is some explanatory text, a '|' character, some file patterns, and another '|' character. These file types appear in the "Files of type:" pull down. The first item is the default, so you may wish to change the first item to include the file types you commonly open. The default value for this setting is built up by combining some specific settings for "All Source" and "All Files" with all the *filter settings. The "All Source" item uses a set of file patterns which combines all the *source.patterns settings. 
#open.filter

## Set a value to be included in the set of file extensions used for the "All Source" pull down menu item in the Open dialog when using the default value for open.filter. For example, *source.patterns.ruby=*.rb;*.rbw; adds the file patterns *.rb and *.rbw to the set of source extensions.
#*source.patterns.name

## Set a value to be included in the file type pull down menu in the Open dialog when using the default value for open.filter. For example, *filter.ruby=Ruby (rb rbw)|*.rb;*.rbw| adds a "Ruby" item to the file type pull down menu. Selecting that item will show files that match the patterns *.rb and *.rbw. There must be 2 '|' characters in the setting.
#*filter.name


## With save.check.modified.time=1, when saving and the file has been modified by another process, check if it should be overwritten by the current contents.
save.check.modified.time=1

## If you set save.session, the list of currently opened buffers will be saved on exit in a session file. When you start SciTE next time (without specifying a file name on the command line) the last session will be restored automatically.
## For GTK+, the file is called ".SciTE.session" and is located in the directory given by the SciTE_USERHOME environment variable and if that is not set, the value of the SciTE_HOME environment variable and if that is not set, the value of the HOME environment variable and if that is not set, the top level directory.
## For Windows, the file is called "SciTE.session" and is located in the directory given by the SciTE_USERHOME environment variable and if that is not set, the value of the SciTE_HOME environment variable and if that is not set, the value of the USERPROFILE environment variable and if that is not set, the directory of the SciTE executable.
## Setting save.recent causes the most recently used files list to be saved on exit in the session file and read at start up.
## Setting save.position causes the SciTE window position on the desktop to be saved on exit in the session file and restored at start up.
## Setting save.find cause the "Find what" and "Replace with" to be saved in the session file.
#save.session
save.recent=1
save.position=1
save.find=1

## Setting session.bookmarks causes bookmarks to be saved in session files. If you set session.folds then the folding state will be saved in session files. When loading a session file bookmarks and/or folds are restored. Folding states are not restored if fold.on.open is set.
session.bookmarks=1
session.folds=1



## Causes files to be deleted before being opened for saving. Can be used to ensure saving under a different capitalisation changes the files capitalisation rather than silently using the old capitalisation.
#save.deletes.first




## When set to 1 shows the current buffer number in the title bar.
title.show.buffers=1





## To support a DBCS language such as Japanese, a code page can be set here. This ensures that double byte characters are always treated as a unit so the caret is never located between the two bytes of a double byte character.
##
## Code page	Value
## Default (single byte character set)	0
## UTF-8	65001
## Japanese Shift-JIS	932
## Simplified Chinese GBK	936
## Korean Wansung	949
## Traditional Chinese Big5	950
## Korean Johab	1361
## Setting code.page to 65001 starts Unicode mode and the document is treated as a sequence of characters expressed as UTF-8. Display is performed by converting to the platform's normal Unicode encoding first so characters from any language will be displayed. Correct glyphs may only be displayed if fonts are chosen that contain the appropriate glyphs. The Tahoma font contains a wide range of glyphs so may be a good choice. 
## This property can not set a single byte character set.
## If output.code.page is set then it is used for the output pane which otherwise matches the edit pane.
code.page=65001
#output.code.page

## This setting allows changing the character set that is asked for when setting up fonts. Not all of the values will work on all platforms.
##
## Character set	Value
## Default	0
## Japanese	128
## Chinese GB2312	134
## Chinese BIG5	136
## Korean	129
## Greek	161
## Eastern European	238
## Baltic	186
## Turkish	162
## Hebrew	177
## Arabic	178
## Thai	222
## Vietnamese	163
## Cyrillic (CP866 on GTK+)	866
## Cyrillic (CP1251 on Windows, KOI8-R on GTK+)	204
## Cyrillic (CP1251 on GTK+)	1251
## European with Euro (ISO 8859-15)	1000
## All of these values except for 1251 and 1000 should work on OS X or Windows. On GTK+ Baltic, Turkish, Thai and Vietnamese will probably not work.
#character.set

# imports.include
# imports.exclude	These settings control which files are imported by import statements.
# The imports.include property defines the names of the properties files that may be imported. Say you are only interested in using fortran and lisp, then in user properties, you could set
# imports.include=fortran lisp
# The imports.exclude property is examined only if imports.include is empty or missing. This property stops the named files from being imported.
# The properties files shipped with SciTE, and which can be included or excluded with these properties, are:
# abaqus ada asl asm asn1 au3 ave avs baan blitzbasic bullant caml cmake cobol coffeescript conf cpp csound css d ecl eiffel erlang escript flagship forth fortran freebasic gap haskell hex html inno kix latex lisp lot lout lua matlab metapost mmixal modula3 nimrod nncrontab nsis opal oscript others pascal perl pov powerpro powershell ps purebasic python r rebol registry ruby rust scriptol smalltalk sorcins specman spice sql tacl tal tcl tex txt2tags vb verilog vhdl yaml.

# command.discover.properties	This property can be used to run a program to determine file encoding and other properties when a file is loaded.
# The program should print a list of property=value lines for each property it wants to set. This is the same format as properties files.
# command.discover.properties=python /home/user/FileDetect.py "$(FilePath)"
# A simple Python script that recognises a particular tag that indicates the file is in the Korean code page 949:
# import sys
# if "Language:Korean" in open(sys.argv[1]).read():
#         print('code.page=949')
#         print('character.set=129')
## Chooses how the file name is displayed in the title bar. When 0 (default) the file name is displayed. When 1 the full path is displayed. When 2 the window title displays "filename in directory".
#title.full.path

## Set the name of the localisation file. For a multi-user installation this allows each user to set a preferred user interface language.
## On OS X, localisation files for some languages are installed in the translations subdirectory of the user home directory which allows setting the user interface to, for example, German with
## locale.properties=$(SciteUserHome)/translations/locale.de.properties
#locale.properties

## When using a localised version, if a term is not found in the locale.properties translation file then use the value of translation.missing instead. By setting this to a marker such as "***" it is easier to check where terms have not been provided with translations.
#translation.missing

## Defines the entries in the Language menu and the file extensions they map to. Each menu item is defined by 3 elements, language name, extension and an optional keyboard equivalent. Each element is terminated by '|'. For example:
## H&ypertext|html|F12|
## Menu items may be commented out by prefixing the name with '#'. The default value for this setting is built up by combining all *language settings.
#menu.language


## The menukey.* settings allow the user to redefine accelerator keys for menus without having to resort to modifying the SciTE source code. The syntax for the setting is:
## menukey.menu_title.menu_name=<modifier>key
## For example, the File | Exit command accelerator could be specified as follows:
## menukey.file.exit=<control>Q
## Note that spaces in menu titles and names must be converted to underscores, and trailing ellipses removed. For example, "File | Save As...." is referenced as "menukey.file.save_as". 
##
## Multiple modifiers may be specified, though each must be surrounded by angle brackets. The recognised modifiers are the same as for the user.shortcuts setting described above. The recognised named keys are also the same as for user.shortcuts, with the addition of "none" to indicate that no accelerator key should be defined for a particular menu.
#menukey.*

## For the GTK+ version determines the initial size of the file selector dialog invoked by the Open and Save commands. Setting has no effect on Windows.
#fileselector.width
#fileselector.height






## Controls when the last position of the caret on the line is modified. When set to 1, the position is not modified when you type a character, a tab, paste the clipboard content or press backspace. The default is 0 which turns off this feature.
#caret.sticky

## Enables or disables the evaluation of the directory properties file. The default is 0 which disables the evaluation. Any other value enables this properties file.
#properties.directory.enable