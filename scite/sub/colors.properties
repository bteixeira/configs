
	###   If set, defines the appearance of the current word highlight. This is
	###   a structured property with multiple attributes similar to:
	###
	###       highlight.current.word.indicator=style:roundbox,colour:#0080FF,under,outlinealpha:140,fillalpha:80
	###
# highlight.current.word.indicator=[style]





	###   The option highlight.current.word.colour defines the colour of
	###   highlight. The default value is #A0A000.
	###   Overridden by highlight.current.word.indicator.
	###
# highlight.current.word.colour





	###   Sets the colours used for displaying selected text. If one of these is
	###   not set then that attribute is not changed for the selection. The
	###   default is to show the selection by changing the background to light
	###   grey and leaving the foreground the same as when it was not selected.
	###   The translucency of the selection is set with selection.alpha with an
	###   alpha of 256 turning translucency off.
	###
# selection.fore
# selection.back
# selection.alpha





	###   Sets the colour used for the caret.
	###
# caret.fore





	###   Similar to selection.fore, selection.back, selection.alpha. Sets the
	###   colours used for displaying additional selections when multiple
	###   selections are enabled or a rectangular selection is made.
	###
# selection.additional.fore
# selection.additional.back
# selection.additional.alpha





	###   Sets the background colour and translucency used for line containing
	###   the caret. Translucency ranges from 0 for completely transparent to
	###   255 for opaque with 256 being opaque and not using translucent drawing
	###   code which may be slower.
	###
# caret.line.back
# caret.line.back.alpha





	###   Indicates long lines. The default edge.mode, 0, does not indicate long
	###   lines. An edge.mode of 1 uses a vertical line to indicate the
	###   specified column and an edge.mode of 2 changes the background colour
	###   of characters beyond that column. For proportional fonts, an edge.mode
	###   of 2 is more useful than 1.
	###
# edge.colour=#FF0000





	###   The colours used to indicate error and warning lines in both the edit
	###   and output panes are set with these two values. If there is a margin
	###   on a pane then a symbol is displayed in the margin to indicate the
	###   error message for the output pane or the line causing the error
	###   message for the edit pane. The error.marker.back is used as the fill
	###   colour of the symbol and the error.marker.fore as the outline colour.
	###   If there is no margin then the background to the line is set to the
	###   error.marker.back colour.
	###
# error.marker.fore
# error.marker.back





	###   The colours used to display bookmarks in the margin. If bookmark.fore
	###   is empty then a blue sphere is used. When the margin is turned off,
	###   bookmarks are shown by a change in the background colour of the line
	###   with the translucency set with bookmark.alpha.
	###
# bookmark.fore
# bookmark.back
# bookmark.alpha





	###   If set, then the Mark All command in the Find dialog will draw
	###   indicators over each string found. This is a structured property with
	###   multiple attributes similar to:
	###
	###       find.mark.indicator=style:roundbox,colour:#0080FF,under,outlinealpha:140,fillalpha:80
	###
# find.mark.indicator





	###   This property defines the alpha level for indicators (default value is
	###   30). The alpha value can range from 0 (completely transparent) to 255
	###   (no transparency). A value out of this range is ignored and the
	###   default one is used.
	###   Will be overridden by specific indicator definitions such as
	###   find.mark.indicator.
	###   
# indicators.alpha





	###   Sets the indicator to use for find.strip.incremental=2 or
	###   replace.strip.incremental=2. This is a structured property with
	###   multiple attributes similar to:
	###
	###       find.indicator.incremental=style:compositionthick,colour:#FFB700,under
	###
# find.indicator.incremental





	###   The lexers determine a style number for each lexical type, such as
	###   keyword, comment or number. These settings determine the visual style
	###   to be used for each style number of each lexer.
	###   The value of each setting is a set of ',' separated fields, some of
	###   which have a subvalue after a ':'. The fields are:
	###
	###       font, size, fore, back, italics, notitalics, bold, notbold,
	###       weight, eolfilled, noteolfilled, underlined, notunderlined, case,
	###       visible, notvisible, changeable, and notchangeable
	###
	###   The font field has a subvalue which is the name of the font, the fore
	###   and back have colour subvalues, the size field has a (fractional)
	###   numeric size subvalue, the weight field has a numeric size subvalue
	###   (1.. 999: 100=light, 400=normal, 700=bold), the case field has a
	###   subvalue of 'm', 'u', or 'l' for mixed, upper or lower case, and the
	###   bold, italics and eolfilled fields have no subvalue. The value
	###   "fore:#FF0000,font:Courier,size:14" represents 14 point, red Courier text.
	###   A global style can be set up using style.*.stylenumber. Any style
	###   options set in the global style will be inherited by each lexer style
	###   unless overridden.
	###
# style.*.stylenumber
# style.lexer.stylenumber





	###   As well as the styles generated by the lexer, there are other numbered
	###   styles used.
	###
	###   Style 32 is the default style and its features will be inherited by
	###   all other styles unless overridden.
	###
	###   Style 33 is used to display line numbers in the margin.
	###
	###   Styles 34 and 35 are used to display matching and non-matching braces
	###   respectively.
	###
	###   Style 36 is used for displaying control characters. This is not a full
	###   style as the foreground and background colours for control characters
	###   are determined by their lexical state rather than this style.
	###
	###   Style 37 is used for displaying indentation guides. Only the fore and
	###   back are used.
	###
	###   Style 38 is used for displaying calltips. Only the font, size, fore
	###   and back are used.
	###
	###   A * can be used instead of a lexer to indicate a global style setting.
	###
# style.lexer.32
# style.lexer.33
# style.lexer.34
# style.lexer.35
# style.lexer.36
# style.lexer.37
# style.lexer.38





	###   Substyles are mainly used to display sets of identifiers distinctly.
	###   When working with a particular library, you may want to highlight all
	###   the calls to functions in that library differently to your own
	###   functions or operating system calls. Substyles splits one style,
	###   commonly an identifier style, into several groups. Only some lexers
	###   support this and within a lexer it will only be supported for some
	###   styles. Currently the cpp lexer allows substyles for identifiers (11)
	###   and comment doc keywords (17), and the python lexer allows substyles
	###   for identifiers (11). Language properties files will specify the
	###   styles that can be split.
	###   This setting defines how many substyles are allocated to a particular
	###   main style. To allow 2 extra styles for identifiers in C++:
	###
	###       substyles.cpp.11=2
	###
# substyles.lexer.stylenumber





	###   This property defines the visual appearance of a substyle. For
	###   example, to display the first substyle of identifiers (11) as pink:
	###
	###       style.cpp.11.1=fore:#EE00AA
	###
# style.lexer.mainstyle.substyle





	###   Defines, with the same syntax as the style properties, the font name
	###   and size to be used when the Use Monospaced Font command is performed.
	###
# font.monospace





	###   These two properties defined the fold margin colour and fold margin
	###   highlight colour. If they are not defined (left commented out) the
	###   colours for the fold margin will default to a reasonable pair of
	###   colours. On Windows, the system colours are used to make the fold
	###   margin appear like the background of scroll bars. As an example, with
	###   fold.margin.colour=#FF0000 and fold.margin.highlight.colour=#0000FF,
	###   the fold margin is a mixture of red and blue.
	###
# fold.margin.colour
# fold.margin.highlight.colour





	###   Define the colour of highlight. The colour by default is red
	###   (#FF0000).
	###
# fold.highlight.colour





	###   To see error messages interspersed with the source code, set
	###   error.inline=1.
	###   Different visual styles are used for different severities:
	###   style.error.0 is the default; style.error.1 for warnings;
	###   style.error.2 for errors; and style.error.3 for fatal errors. The
	###   severity of a message is inferred from finding the text "warning",
	###   "error", or "fatal" in the message.
	###
# style.error.0
# style.error.1
# style.error.2
# style.error.3





# Style 32 is supposedly the default
#style.*.32=font:monospace,size:9,fore:#F8F8F2,back:#272822
# Line numbers
#style.*.33=font:monospace,size:9,fore:#F8F8F2,back:#272822
# Matching braces
#style.*.34=fore:#FF0000
# Non-matching braces
#style.*.35=fore:#FF0000
# Control characters
#style.*.36=fore:#FF0000
# Style 37 Indentation guides. Only the fore and back are used.
#style.*.37=fore:#FF0000,back:#FFFFFF
# Style 38 is used for displaying calltips. Only the font, size, fore and back are used.
#style.*.38=fore:#FF0000,back:#FFFFFF

# UNDOCUMENTED LEXER STYLES
# 0: whitespace? default?
#style.*.0=fore:#000000,back:#FF0000
# 1: Box Comments /* */, HTML: Tags
#style.*.1=fore:#000000,back:#FF0000
# 2: Line Comment //
#style.*.2=fore:#000000,back:#FF0000
# 3: Doc Comment /** /*!, HTML: attributes, Properties: = sign
#style.*.3=fore:#000000,back:#FF0000
# 4: Number token
#style.*.4=fore:#000000,back:#FF0000
# 5: CPP Keyword, Properties prop name
#style.*.5=fore:#FF0000,back:#FF0000
# 6: CPP+HTML: double-quote string
#style.*.6=fore:#000000,back:#FF0000
# 7: CPP: single-quote string
#style.*.7=fore:#000000,back:#FF0000
# 8: HTML: characters around attributes
#style.*.8=fore:#000000,back:#FF0000
# 9: CPP preprocessor, HTML: comments
#style.*.9=fore:#000000,back:#FF0000
# 10: CPP operators and braces, HTML entities
#style.*.10=fore:#000000,back:#FF0000
# 11: CPP identifiers
#style.*.11=fore:#000000,back:#FF0000
# 12: ?? used to highlight CPP unterminated strings?
#style.*.12=fore:#000000,back:#FF0000
#style.*.13=fore:#000000,back:#FF0000
#style.*.14=fore:#000000,back:#FF0000
#style.*.15=fore:#000000,back:#FF0000
#style.*.16=fore:#000000,back:#FF0000
#style.*.17=fore:#000000,back:#FF0000
#style.*.18=fore:#000000,back:#FF0000
#style.*.19=fore:#000000,back:#FF0000
#style.*.20=fore:#000000,back:#FF0000
#style.*.21=fore:#000000,back:#FF0000
#style.*.22=fore:#000000,back:#FF0000
#style.*.23=fore:#000000,back:#FF0000
#style.*.24=fore:#000000,back:#FF0000
#style.*.25=fore:#000000,back:#FF0000
#style.*.26=fore:#000000,back:#FF0000
#style.*.27=fore:#000000,back:#FF0000
#style.*.28=fore:#000000,back:#FF0000
#style.*.29=fore:#000000,back:#FF0000
#style.*.30=fore:#000000,back:#FF0000
#style.*.31=fore:#000000,back:#FF0000













me.font=font:monospace,size:9,bold
selection.alpha=128
# Monokai again
me.monokai.pink=#F92672
me.monokai.white=#F8F8F2
me.monokai.white2=#F8F8F0
me.monokai.gray=#E5715E
me.monokai.darkgray=#49483E
me.monokai.black=#272822
me.monokai.yellow=#E6DB74
me.monokai.green=#A6E22E
me.monokai.purple=#AE81FF
me.monokai.blue=#66D9EF

me.color.default=fore:$(me.monokai.white),back:$(me.monokai.black)
caret.fore=$(me.monokai.green)
caret.line.back=#49483E
selection.back=$(me.monokai.green)
me.color.comment=fore:$(me.monokai.gray)
me.color.string=fore:$(me.monokai.yellow)
me.color.number=fore:$(me.monokai.purple)
me.color.constant=fore:$(me.monokai.purple)
me.color.keyword=fore:$(me.monokai.blue)
me.color.operator=fore:$(me.monokai.pink)
me.color.operator.matching=fore:$(me.monokai.purple)
me.color.operator.nonmatching=back:$(me.monokai.purple)
me.color.whitespace=fore:$(me.monokai.gray),back:$(me.monokai.black)
me.color.string.unterminated=fore:$(me.monokai.pink),back:$(me.monokai.yellow),eolfilled
me.color.error=fore:$(me.monokai.pink),back:$(me.monokai.yellow)
me.color.regex=fore:$(me.monokai.yellow),back:$(me.monokai.darkgray)
me.color.unknown=fore:#000000,back:#FF0000

style.*.32=$(me.font),$(me.color.default)
style.*.34=$(me.color.operator.matching)
style.*.35=$(me.color.operator.nonmatching)

# Lexers

# Properties styles
# Default
#style.props.0=fore:#000000,back:#FF0000
# Comment
style.props.1=$(me.color.comment)
# Section (???)
style.props.2=fore:#000000,back:#FF0000,eolfilled
# Assignment operator
style.props.3=$(me.color.operator)
# Default value (@) (???)
style.props.4=$(me.color.string)
# Key
style.props.5=$(me.color.keyword)
# Matched Operators
style.props.34=
style.props.35=


# CPP
# Default
style.cpp.32=
# White space
style.cpp.0=$(me.color.whitespace)
# Comment: /* */.
style.cpp.1=$(me.color.comment)
# Line Comment: //.
style.cpp.2=$(me.color.comment)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(me.color.comment)
# Number
style.cpp.4=$(me.color.number)
# Keyword
style.cpp.5=$(me.color.keyword)
# Double quoted string
style.cpp.6=$(me.color.string)
# Single quoted string
style.cpp.7=$(me.color.string)
# UUIDs (only in IDL) (???)
style.cpp.8=fore:#000000,back:#FF0000
# Preprocessor
style.cpp.9=fore:#000000,back:#FF0000
# Operators
style.cpp.10=$(me.color.operator)
# Identifiers
style.cpp.11=$(me.color.white)
# End of line where string is not closed
style.cpp.12=$(me.color.string.unterminated)
# Verbatim strings for C#
style.cpp.13=fore:#000000,back:#FF0000
# Regular expressions for JavaScript
style.cpp.14=$(me.color.regex)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(me.color.comment)
# Keywords2 (???)
style.cpp.16=fore:#000000,back:#FF0000
# Comment keyword (???)
style.cpp.17=fore:#000000,back:#FF0000
# Comment keyword error (???)
style.cpp.18=fore:#000000,back:#FF0000
# Raw strings for C++0x (???)
style.cpp.20=fore:#000000,back:#FF0000
# Triple-quoted strings for Vala (???)
style.cpp.21=fore:#000000,back:#FF0000
# Hash-quoted strings for Pike (???)
style.cpp.22=fore:#000000,back:#FF0000
# Preprocessor stream comment (???)
style.cpp.23=fore:#000000,back:#FF0000
# Preprocessor stream doc comment (???)
style.cpp.24=fore:#000000,back:#FF0000
# User defined literals (???)
style.cpp.25=fore:#000000,back:#FF0000
# Task Marker (???)
style.cpp.26=fore:#000000,back:#FF0000

# Inactive states are 64 greater than their active counterparts
# (???)
# White space
style.cpp.64=fore:#C0C0C0
# Comment: /* */.
style.cpp.65=$(style.cpp.1),fore:#90B090
# Line Comment: //.
style.cpp.66=$(style.cpp.2),fore:#90B090
# Doc comment: block comments beginning with /** or /*!
style.cpp.67=$(style.cpp.3),fore:#D0D0D0
# Number
style.cpp.68=$(style.cpp.4),fore:#90B0B0
# Keyword
style.cpp.69=$(style.cpp.5),fore:#9090B0
# Double quoted string
style.cpp.70=$(style.cpp.6),fore:#B090B0
# Single quoted string
style.cpp.71=$(style.cpp.7),fore:#B090B0
# UUIDs (only in IDL)
style.cpp.72=$(style.cpp.8),fore:#C0C0C0
# Preprocessor
style.cpp.73=$(style.cpp.9),fore:#B0B090
# Operators
style.cpp.74=$(style.cpp.10),fore:#B0B0B0
# Identifiers
style.cpp.75=$(style.cpp.11),fore:#B0B0B0
# End of line where string is not closed
style.cpp.76=$(style.cpp.12),fore:#000000
# Verbatim strings for C#
style.cpp.77=$(style.cpp.13),fore:#90B090
# Regular expressions for JavaScript
style.cpp.78=$(style.cpp.14),fore:#7FAF7F
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.79=$(style.cpp.15),fore:#C0C0C0
# Keywords2
style.cpp.80=$(style.cpp.16),fore:#C0C0C0
# Comment keyword
style.cpp.81=$(style.cpp.17),fore:#C0C0C0
# Comment keyword error
style.cpp.82=$(style.cpp.18),fore:#C0C0C0
# Raw strings for C++0x
style.cpp.84=$(style.cpp.20),fore:#B090B0
# Triple-quoted strings for Vala
style.cpp.85=$(style.cpp.21),fore:#90B090
# Hash-quoted strings for Pike
style.cpp.86=$(style.cpp.22),fore:#90B090
# Preprocessor stream comment
style.cpp.87=$(style.cpp.23),fore:#A0C090
# Preprocessor stream doc comment
style.cpp.88=$(style.cpp.23),fore:#C0C0C0
# User defined literals
style.cpp.89=fore:#D7A090
# Task Marker
style.cpp.90=fore:#C3A1CF,$(font.code.comment.line)



# HTML and XML share lexing code so use the same style numbers
# Hypertext Markup Language

# Text
style.hypertext.0=
# Tags
style.hypertext.1=fore:#FF0000
# Unknown Tags
style.hypertext.2=fore:#FF0000
# Attributes
style.hypertext.3=$(me.color.operator)
# Unknown Attributes
style.hypertext.4=$(me.color.error)
# Numbers
style.hypertext.5=$(me.color.number)
# Double quoted strings
style.hypertext.6=$(me.color.string)
# Single quoted strings
style.hypertext.7=$(me.color.string)
# Other inside tag (anything inside a tag that doesn't qualify as one of the other styles, including whitespace)
style.hypertext.8=fore:#FF0000
# Comment
style.hypertext.9=$(me.color.comment)
# Entities
style.hypertext.10=$(me.color.number)
# XML style tag ends '/>'
style.hypertext.11=$(me.color.unknown)
# XML identifier start '<?'
style.hypertext.12=$(me.color.unknown)
# XML identifier end '?>'
style.hypertext.13=$(me.color.unknown)
#  SCRIPT
style.hypertext.14=$(me.color.unknown)
# ASP <% ... %>
style.hypertext.15=$(me.color.unknown)
# ASP <% ... %>
style.hypertext.16=$(me.color.unknown)
# CDATA
style.hypertext.17=$(me.color.unknown)
# PHP
style.hypertext.18=$(me.color.unknown)
# Unquoted values
style.hypertext.19=$(me.color.unknown)
# JSP Comment <%-- ... --%>
style.hypertext.20=fore:#000000,back:#FFFFD0
# SGML tags <! ... >
style.hypertext.21=fore:#FF0000
# SGML command
style.hypertext.22=fore:#000080,$(colour.hypertext.sgml.back),bold
# SGML 1st param
style.hypertext.23=fore:#006600,$(colour.hypertext.sgml.back)
# SGML double string
style.hypertext.24=fore:#800000,$(colour.hypertext.sgml.back)
# SGML single string
style.hypertext.25=fore:#993300,$(colour.hypertext.sgml.back)
# SGML error
style.hypertext.26=fore:#800000,back:#FF6666
# SGML special (#xxxx type)
style.hypertext.27=fore:#3366FF,$(colour.hypertext.sgml.back)
# SGML entity
style.hypertext.28=fore:#333333,$(colour.hypertext.sgml.back)
# SGML comment
style.hypertext.29=fore:#808000,$(colour.hypertext.sgml.back)
# SGML block
style.hypertext.31=fore:#000066,back:#CCCCE0
# Some reasonable background colours found in the default Windows palette
# Off White #FFFBF0    Light green #C0DCC0    Light Blue #A6CAF0
# Matched Operators
style.hypertext.34=fore:#0000FF,notbold,$(font.text)
style.hypertext.35=fore:#FF0000,notbold,$(font.text)

# Embedded Javascript
#fontcolour.js=$(colour.embedded.js)
# JS Start - allows eol filled background to not start on same line as SCRIPT tag
style.hypertext.40=fore:#7F7F00
# JS Default
style.hypertext.41=fore:#000000,bold,eolfilled
# JS Comment
style.hypertext.42=$(me.color.comment)
# JS Line Comment
style.hypertext.43=$(me.color.comment)
# JS Doc comment
style.hypertext.44=$(me.color.comment)
# JS Number
style.hypertext.45=$(me.color.number)
# JS Word
style.hypertext.46=
# JS Keyword
style.hypertext.47=$(me.color.keyword)
# JS Double quoted string
style.hypertext.48=$(me.color.string)
# JS Single quoted string
style.hypertext.49=$(me.color.string)
# JS Symbols
style.hypertext.50=$(me.color.operator)
# JavaScript EOL
style.hypertext.51=
# JavaScript RegEx
style.hypertext.52=$(me.color.regex)

# ASP Javascript
# JS Start - allows eol filled background to not start on same line as SCRIPT tag
style.hypertext.55=fore:#7F7F00
# JS Default
style.hypertext.56=fore:#000000,bold,$(font.js),$(colour.hypertext.server.javascript.back),eolfilled
# JS Comment
style.hypertext.57=fore:#007F00,$(font.js),$(colour.hypertext.server.javascript.back),eolfilled
# JS Line Comment
style.hypertext.58=fore:#007F00,$(font.js),$(colour.hypertext.server.javascript.back)
# JS Doc comment
style.hypertext.59=fore:#7F7F7F,bold,$(font.js),$(colour.hypertext.server.javascript.back),eolfilled
# JS Number
style.hypertext.60=fore:#007F7F,$(font.js),$(colour.hypertext.server.javascript.back)
# JS Word
style.hypertext.61=fore:#000000,$(font.js),$(colour.hypertext.server.javascript.back)
# JS Keyword
style.hypertext.62=fore:#00007F,bold,$(font.js),$(colour.hypertext.server.javascript.back)
# JS Double quoted string
style.hypertext.63=fore:#7F007F,$(font.js),$(colour.hypertext.server.javascript.back)
# JS Single quoted string
style.hypertext.64=fore:#7F007F,$(font.js),$(colour.hypertext.server.javascript.back)
# JS Symbols
style.hypertext.65=fore:#000000,bold,$(font.js),$(colour.hypertext.server.javascript.back)
# JavaScript EOL
style.hypertext.66=back:#BFBBB0,eolfilled
# JavaScript RegEx
style.hypertext.67=back:#FFBBB0

# Embedded VBS
# Start
style.hypertext.70=
# Default
style.hypertext.71=$(font.vbs),$(colour.hypertext.client.vbs.back),fore:#000000,eolfilled
# Comment
style.hypertext.72=$(font.comment),$(colour.hypertext.client.vbs.back),fore:#008000,eolfilled
# Number
style.hypertext.73=$(font.vbs),$(colour.hypertext.client.vbs.back),fore:#008080,eolfilled
# KeyWord
style.hypertext.74=$(font.vbs),$(colour.hypertext.client.vbs.back),fore:#000080,bold,eolfilled
# String
style.hypertext.75=$(font.vbs),$(colour.hypertext.client.vbs.back),fore:#800080,eolfilled
# Identifier
style.hypertext.76=$(font.vbs),$(colour.hypertext.client.vbs.back),fore:#000080,eolfilled
# Unterminated string
style.hypertext.77=$(font.vbs),back:#7F7FFF,fore:#000080,eolfilled

# ASP VBS
# Start
style.hypertext.80=
# Default
style.hypertext.81=$(font.vbs),$(colour.hypertext.server.vbs.back),fore:#000000,eolfilled
# Comment
style.hypertext.82=$(font.comment),$(colour.hypertext.server.vbs.back),fore:#008000,eolfilled
# Number
style.hypertext.83=$(font.vbs),$(colour.hypertext.server.vbs.back),fore:#008080,eolfilled
# KeyWord
style.hypertext.84=$(font.vbs),$(colour.hypertext.server.vbs.back),fore:#000080,bold,eolfilled
# String
style.hypertext.85=$(font.vbs),$(colour.hypertext.server.vbs.back),fore:#800080,eolfilled
# Identifier
style.hypertext.86=$(font.vbs),$(colour.hypertext.server.vbs.back),fore:#000080,eolfilled
# Unterminated string
style.hypertext.87=$(font.vbs),back:#7F7FBF,fore:#000080,eolfilled

# Embedded Python
style.hypertext.90=fore:#808080
style.hypertext.91=fore:#808080,$(colour.hypertext.client.python.back),eolfilled
# Comment
style.hypertext.92=fore:#007F00,$(font.comment),$(colour.hypertext.client.python.back),eolfilled
# Number
style.hypertext.93=fore:#007F7F,$(colour.hypertext.client.python.back),eolfilled
# String
style.hypertext.94=fore:#7F007F,$(font.monospace),$(colour.hypertext.client.python.back),eolfilled
# Single quoted string
style.hypertext.95=fore:#7F007F,$(font.monospace),$(colour.hypertext.client.python.back),eolfilled
# Keyword
style.hypertext.96=fore:#00007F,bold,$(colour.hypertext.client.python.back),eolfilled
# Triple quotes
style.hypertext.97=fore:#7F0000,$(colour.hypertext.client.python.back),eolfilled
# Triple double quotes
style.hypertext.98=fore:#7F0000,$(colour.hypertext.client.python.back),eolfilled
# Class name definition
style.hypertext.99=fore:#0000FF,bold,$(colour.hypertext.client.python.back),eolfilled
# Function or method name definition
style.hypertext.100=fore:#007F7F,bold,$(colour.hypertext.client.python.back),eolfilled
# Operators
style.hypertext.101=bold,$(colour.hypertext.client.python.back),eolfilled
# Identifiers
style.hypertext.102=$(colour.hypertext.client.python.back),eolfilled

# PHP complex variable
style.hypertext.104=fore:#007F00,italics,$(colour.hypertext.server.php.back)

# ASP Python
style.hypertext.105=fore:#808080
style.hypertext.106=fore:#808080,$(colour.hypertext.server.python.back),eolfilled
# Comment
style.hypertext.107=fore:#007F00,$(font.comment),$(colour.hypertext.server.python.back),eolfilled
# Number
style.hypertext.108=fore:#007F7F,$(colour.hypertext.server.python.back),eolfilled
# String
style.hypertext.109=fore:#7F007F,$(font.monospace),$(colour.hypertext.server.python.back),eolfilled
# Single quoted string
style.hypertext.110=fore:#7F007F,$(font.monospace),$(colour.hypertext.server.python.back),eolfilled
# Keyword
style.hypertext.111=fore:#00007F,bold,$(colour.hypertext.server.python.back),eolfilled
# Triple quotes
style.hypertext.112=fore:#7F0000,$(colour.hypertext.server.python.back),eolfilled
# Triple double quotes
style.hypertext.113=fore:#7F0000,$(colour.hypertext.server.python.back),eolfilled
# Class name definition
style.hypertext.114=fore:#0000FF,bold,$(colour.hypertext.server.python.back),eolfilled
# Function or method name definition
style.hypertext.115=fore:#007F7F,bold,$(colour.hypertext.server.python.back),eolfilled
# Operators
style.hypertext.116=bold,$(colour.hypertext.server.python.back),eolfilled
# Identifiers
style.hypertext.117=$(colour.hypertext.server.python.back),eolfilled

# PHP
# Default
style.hypertext.118=fore:#000033,$(colour.hypertext.server.php.back),eolfilled
# Double quoted String
style.hypertext.119=fore:#007F00,$(colour.hypertext.server.php.back)
# Single quoted string
style.hypertext.120=fore:#009F00,$(colour.hypertext.server.php.back)
# Keyword
style.hypertext.121=fore:#7F007F,italics,$(colour.hypertext.server.php.back)
# Number
style.hypertext.122=fore:#CC9900,$(colour.hypertext.server.php.back)
# Variable
style.hypertext.123=fore:#00007F,italics,$(colour.hypertext.server.php.back)
# Comment
style.hypertext.124=fore:#999999,$(font.comment),$(colour.hypertext.server.php.back)
# One line comment
style.hypertext.125=fore:#666666,italics,$(font.comment),$(colour.hypertext.server.php.back)
# PHP variable in double quoted string
style.hypertext.126=fore:#007F00,italics,$(colour.hypertext.server.php.back)
# PHP operator
style.hypertext.127=fore:#000000,$(colour.hypertext.server.php.back)


import .sciteConfig/sub/colors/xml





## CSS
# Default
style.css.32=
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.css.0=$(me.color.whitespace)
# Selector (HTML tag)
style.css.1=
# Class selector ([HtmlTag].classSelector)
style.css.2=
# Pseudo class (HtmlTag:pseudoClass) see "keywords2" above
style.css.3=$(me.color.string)
# Unknown Pseudo class
style.css.4=$(me.color.error)
# Operator
style.css.5=$(me.color.operator)
# CSS1 Property, see keywords
style.css.6=$(me.color.keyword)
# Unknown Property
style.css.7=$(me.color.error)
# Value
style.css.8=
# Comment
style.css.9=$(me.color.comment)
# ID selector (#IdSel)
style.css.10=$(me.color.number)
# "!important"
style.css.11=$(me.color.error)
# At-rule (@) except @media
style.css.12=
# Double quoted strings
style.css.13=$(me.color.string)
# Single quoted strings
style.css.14=$(me.color.string)
# CSS2 Property, see keywords3
style.css.15=$(me.color.keyword)
# Attribute selection ([att='val'])
style.css.16=
# CSS3 Property, see keywords4
style.css.17=$(me.color.keyword)
# Pseudo elements, see keywords5
style.css.18=$(me.color.string)
# Other CSS Property, see keywords6
style.css.19=$(me.color.keyword)
# Other Pseudoclass, see keywords7
style.css.20=$(me.color.string)
# Other Pseudoelement, see keywords8
style.css.21=$(me.color.string)
# "@media"
style.css.22=$(colour.preproc),bold


# SQL styles
# White space
style.sql.0=fore:#808080
# Comment
style.sql.1=$(me.color.comment)
# Line Comment
style.sql.2=$(me.color.comment)
# Doc comment
style.sql.3=$(me.color.comment)
# Number
style.sql.4=$(me.color.number)
# Keyword
style.sql.5=$(me.color.keyword)
# Double quoted string
style.sql.6=$(me.color.string)
# Single quoted string
style.sql.7=$(me.color.string)
# SQL*Plus
style.sql.8=$(me.color.keyword)
# SQL*Plus PROMPT
style.sql.9=$(me.color.unknown)
# Operators
style.sql.10=$(me.color.operator)
# Identifiers
style.sql.11=
# End of line where string is not closed / not used
style.sql.12=$(me.color.error)
# SQL*Plus Comment
style.sql.13=$(me.color.comment)
# not used
# style.sql.14=
# Hash Line Comment
style.sql.15=$(me.color.comment)
# Keywords2: Database objects
style.sql.16=$(me.color.unknown)
# Comment Doc Keyword
style.sql.17=$(me.color.comment)
# Comment Doc Keyword Error
style.sql.18=$(me.color.comment)
# Keywords5: User Keywords 1
style.sql.19=fore:#4B0082
# Keywords6: User Keywords 2
style.sql.20=fore:#B00040
# Keywords7: User Keywords 3
style.sql.21=fore:#8B0000
# Keywords8: User Keywords 4
style.sql.22=fore:#800080

# Braces are only matched in operator style
braces.sql.style=10




## Sets the colours used for displaying all visible whitespace, overriding any styling applied by the lexer.
#whitespace.fore
#whitespace.back

