## By default (0), syntax styling is performed for all the currently visible text before displaying it. On very large files, this may make scrolling down slow. With idle.styling=1, a small amount of styling is performed before display and then further styling is performed incrementally in the background. This may result in the text initially appearing uncoloured and then, some time later, it is coloured. Text after the currently visible portion may be styled in the background with 2. To style both before and after the visible text in the background use the value 3. output.idle.styling is the equivalent setting for the output pane.
#idle.styling
#output.idle.styling



## A large proportion of the time spent in the editor is used to lay out text prior to drawing it. This information often stays static between repaints so can be cached with these settings. There are four levels of caching. 0 is no caching, 1 caches the line that the caret is on, 2 caches the visible page as well as the caret, and 3 caches the whole document. The more that is cached, the greater the amount of memory used, with 3 using large amounts of memory, 7 times the size of the text in the document. However, level 3 dramatically speeds up dynamic wrapping by around 25 times on large source files so is a very good option to use when wrapping is turned on and memory is plentiful.
#cache.layout
#output.cache.layout

## To avoid accidentally loading huge files on slow media, or just to ensure SciTE is used only to edit human readable code, the user can set the max.file.size property to specify a limit to file loading. If unset or set to 0, there is no limit. If set to a given size in bytes and if a file to load exceeds this limit, the user is asked if the file should be loaded. If accepted, the file is read as usual. If rejected then no action is taken (no file loaded, no buffer created).
#max.file.size

