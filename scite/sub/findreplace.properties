## These properties define the initial conditions for find and replace commands. The find.replace.matchcase property turns of the "Match case" option, find.replace.regexp the "Regular expression" option, find.replace.wrap the "Wrap around" option and find.replace.escapes the "Transform backslash expressions" option.
find.replace.matchcase=0
find.replace.regexp=1
find.replace.wrap=0
find.replace.escapes=1

## Change behaviour of Regular expression search. If set to 0 (the default), characters '(' and ')' must be escaped by '\' to behave as regexp meta characters. If set to 1, these characters are meta characters itself.
find.replace.regexp.posix=1

## Use in-window strips rather than dialogs for performing Find or Replace commands.
find.use.strip=1
replace.use.strip=1

## Perform incremental search when typing in the find and replace strips. Set to 1 to enable incremental searching and 2 to enable both incremental searching and highlighting all matches. Highlighting all matches (2) can be slow on large files so should only be enabled when performance is reasonable.
find.strip.incremental=2
replace.strip.incremental=2

## Buttons on GTK+ often contain extra spacing that makes strips take too much room. This setting tries to limit the height of buttons. A value of 23 or 24 may work well.
strip.button.height=5

## Enables Replace in Buffers command
#find.replace.advanced

## The Find in Files command works in a similar way to the building commands executing a command line tool with output redirected to the output pane. If the command produces output understood by one of the error output passes, as does grep, then the F4 and Shift+F4 keys can be used to move through all the matches. The $(find.what), $(find.files), and $(find.directory) variables can be used for the values from the Find in Files dialog.
## There are some scripts that implement this feature in Perl better than grep does itself here and here. This command line works with Cygwin on Windows, with modifications to suit the Cygwin installation directory:
## find.command=cmd /c c:\cygwin\bin\find "$(find.directory)" -name "$(find.files)" -print0 | c:\cygwin\bin\xargs -0 fgrep -G -n "$(find.what)"
## On Windows, the find string can be given to the find command through its standard input stream to avoid problems with quote interpretation. To do this, specify find.input to be the search string, $(find.what). 
## If find.command is empty then SciTE's own search code is used. This only does a simple search without regular expressions and is faster than running an external program.
#find.command

## This is the default set of files to search through using the Find in Files command. The find.files property can contain a list of sets of files separated by '|' like "*.cxx *.h|*.py *.pyw|*.html" which adds three entries to the history and uses the first as the default value.
## The evaluation of this setting is a little unusual in that each entry in the value from the property files is appended to the end of the history if that entry is not already present. This means that opening files from different directories will result in any local setting of find.files being added to the list.
#find.files

## If find.in.dot is 1 then Find in Files searches in directories that start with '.'. The default behaviour is to prevent SciTE finding matches in the unmodified versions of files kept by Subversion in .svn subdirectories.
#find.in.dot

#find.in.binary	If find.in.binary is 1 then Find in Files displays matches in binary files. For Find in Files, a binary file is a file that contains a NUL byte in the first 64K block read from the file.
#find.in.directory	If set then Find in Files directory will be prefilled by this value. If not set then Find in Files directory will be prefilled by directory of current file.
#find.in.files.close.on.find	Set to 0 to prevent the Find in Files dialog from closing when "Find" pressed.
